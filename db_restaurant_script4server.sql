/* ------------------------------------------------
 *
 *     	    db_restaurant_script4server.sql
 *
 *		"База данных РЕСТОРАН"
 *
 *	     Выполнил: Козлов Ярослав
 *	Преподаватель: Шатохин Олег Николаевич
 *
 *		 Дата: 17.08.2022
 *
 * ------------------------------------------------
 *
 * Скрипт для запуска на серверной части PostgreSQL!
 *
 * Скрипт создаёт:
 *
 *  - Базу данных exam4yaro (которая включает в себя
 *	все остальные объекты проекта);
 *
 *  - Схему "ярослав_козлов_ресторан" для размещения
 *	всех объектов БД "Ресторан";
 *
 *  - Таблицу "варианты_меню" с названиями меню;
 *  - Таблицу "разделы_меню" с названиями разделов для каждого меню;
 *  - Таблицу "блюда" со списком всех блюд;
 *  - Таблицу "разделы_блюда" для связи "многие : многие"
 *	между блюдами и разделами меню (чтобы можно было,
 *	с одной стороны, в одном разделе меню разместить
 *	несколько блюд, а с другой стороны, одно и то же
 *	блюдо использовать в  разделах разных вариантов меню);
 *  - Таблицу
 *
 *
 *
 *
 */


\set echo all
\set ON_ERROR_STOP on

\echo
\echo '╔══════════════════════════════════════════════════════╗'
\echo '║                                                      ║'
\echo '║               АТТЕСТАЦИОННОЕ ЗАДАНИЕ                 ║'
\echo '║               "База данных РЕСТОРАН"                 ║'
\echo '║                                                      ║'
\echo '║          Выполнил: Козлов Ярослав (группа 2)         ║'
\echo '║        Преподаватель: Шатохин Олег Николаевич        ║'
\echo '║                                                      ║'
\echo '║                       2022                           ║'
\echo '║                                                      ║'
\echo '╚══════════════════════════════════════════════════════╝'
\echo

\echo '- Проверка отсутствия подключения к БД exam4yaro...'

do
language plpgsql
$проверка_отключения_от_БД_exam4yaro$
begin

    if current_database() = 'exam4yaro' then
	raise exception 'ВНИМАНИЕ! Вы подключены к БД exam4yaro ─▶ удаление БД невозможно.' using HINT = 'Для удаления старой версии БД exam4yaro необходимо подключиться к другой БД и перезапустить скрипт.';
    end if;

end;
$проверка_отключения_от_БД_exam4yaro$;


\echo
\echo '- Удаление старой версии БД...'
-- Удаление старой версии БД 
drop database if exists exam4yaro;

\echo
\echo '- Создание базы данных exam4yaro...'
create database exam4yaro encoding 'UTF8';

\echo
\echo '- Установление соединения с БД exam4yaro...'
\connect exam4yaro



\echo
\echo '╔══════════════════════════════════════════╗'
\echo '║ ТОЧКА ВХОДА В ОСНОВНОЙ БЛОК УСТАНОВКИ БД ║'
\echo '╚══════════════════════════════════════════╝'
\echo

do
language plpgsql
$final_task$ <<Основной_блок_установки_БД>>
begin
raise NOTICE E'\n\n\n';

    <<DDL_блок_создания_объектов_БД>>
    declare
        r record;
    begin
        
        <<блок_подготовки_кофигурации>>
        declare
            исходные_пути_поиска varchar;
            временные_пути_поиска varchar;
        begin
                
            raise NOTICE '- Создание схемы ярослав_козлов_ресторан...';
            
            -- Создание схемы для объектов базы данных "Ресторан"
            create schema ярослав_козлов_ресторан;
            
            raise NOTICE ' ';
            raise NOTICE 'Обновлённый список схем:';
            raise NOTICE ' ';
            
            for r in (select * from information_schema.schemata)
            loop
                raise notice '-%', r.schema_name;
            end loop;
            
            raise NOTICE ' ';
            
            -- Текущее значение переменной путей поиска
            исходные_пути_поиска = current_setting('search_path');
                        
            -- Добавление созданной схемы в переменную путей поиска
            временные_пути_поиска = 'ярослав_козлов_ресторан, ' || исходные_пути_поиска;
            
            perform set_config('search_path', временные_пути_поиска, false);        
            raise notice '- Установка временных путей поиска: %', current_setting('search_path');
                
        end блок_подготовки_кофигурации;
    
        
         -- [ ТАБЛИЦЫ ] --                    
        
        
        <<Блок_создания_таблиц>>   
        begin
        
            raise NOTICE ' ';            
            raise notice '- Создание таблицы для вариантов меню...';
            
            -- Создание таблицы для вариантов меню
            create table варианты_меню(            
                id_меню         int     primary key,                
                название_меню   varchar unique not null                
            );
            
        
            raise notice '- Создание таблицы для разделов меню...';
            
            -- Создание таблицы для разделов меню
            create table разделы_меню(
            
                id_меню             int     references варианты_меню (id_меню)
                                                                on update cascade
                                                                on delete cascade,
                id_раздела          int     not null,
                название_раздела    varchar not null,
                
                constraint PK_разделы_меню primary key (id_меню, id_раздела)
            );
                        
            raise notice '- Создание таблицы для блюд меню...';
            
            -- Создание таблицы для блюд меню
            create table блюда(
                id_блюда        serial  primary key,
                название_блюда  varchar unique not null,
                количество      varchar not null,
                цена            int     not null
            );
            
            
            raise notice '- Создание промежуточной таблицы для связи "многие : многие" между блюдами и (разделами) меню...';
        
            -- Создание промежуточной таблицы для связи [раздел меню] >---< [блюдо]
            create table раздел_блюдо(
                id_меню     int,
                id_раздела  int,
                id_блюда    int,
        
                constraint PK_раздел_блюдо primary key (id_меню, id_раздела, id_блюда),                
                constraint FK_раздел_меню foreign key (id_меню, id_раздела)
                                                references разделы_меню
                                                        on update cascade
                                                        on delete cascade,                        
                constraint FK_блюдо foreign key (id_блюда)
                                                references блюда
                                                        on update cascade
                                                        on delete cascade
            );
        
        
        -----------------------------------------------------------------------
        
            create table графики_рабочего_времени(
                id_графика              int     primary key,
                имя_графика             varchar,
                начало_рабочего_времени time,
                конец_рабочего_времени  time    
            );
            
            create table должности(
            
                id_должности          int     primary key,
                название_должности    varchar
            
            );
            
            create table сотрудники(    
                таб_номер               int         primary key,
                фамилия                 varchar,
                имя                     varchar,
                отчество                varchar,
                должность               int         references должности,
                график_рабочего_времени int         references графики_рабочего_времени
            );
            
            create table заказы(
                id_заказа       serial      primary key,    
                время_заказа    timestamp   default current_timestamp,
                id_сотрудника   int,
                номер_столика   int,
                сумма_заказа    numeric,
                скидка          numeric,
                статус          varchar     default 'открыт'      
            );
        
            create table счета(
                id_счёта    serial      primary key,    
                время_счёта timestamp,
                id_заказа   int         references заказы,
                сумма_счёта numeric,
                статус      varchar     default 'не оплачен'      
            );
            
            create table виды_платежей(
                   id int primary key,
             название_вида_платежа varchar 
            );
            
            
            create table платежи(
            
                id_платежа      serial      primary key,
                
                время_платежа   timestamp   default current_timestamp,
                id_счёта        int         references счета,
                вид_платежа     int         references виды_платежей,
                сумма_платежа   numeric
                  
            );
        
            create table блюда_заказа(
            
                id_заказа       int         references заказы,                
                id_блюда        int         references блюда,
                
                primary key (id_заказа, id_блюда)
                  
            );
        
        ---------------------------------------------------------------------
            
            create table виды_карт_скидок(
            
                id              int     primary key,                
                название        varchar,                
                размер_скидки   int
                  
            );
        
            create table гости(
            
                id          int         primary key,
                фамилия     varchar,
                имя         varchar,
                отчество    varchar,
                телефон     varchar
            
            );
            
            create table гостевые_карты_скидок(
            
                id_карты    serial  primary key,
                тип_карты   int     references виды_карт_скидок,
                id_гостя    int     references гости
            
            );
        
            create table скидки_заказа_по_карте(
            
                id_заказа   int primary key references  заказы,
                id_карты    int references  гостевые_карты_скидок
            
            );
        
        ----------------------------------------------------
            
            create table акции_на_заказы(
            
                id              serial      primary key,
                название        varchar,
                размер_скидки   int
                
            );
        
            create table скидки_заказа_по_акциям(
            
                id_заказа   int primary key references  заказы,
                id_акции    int references  акции_на_заказы
            
            );      
        
        --------------------------------------------------------
            
            create table акции_на_блюда(
            
                id              serial      primary key,
                название        varchar,
                размер_скидки   int
                
            );
            
            create table скидки_блюд(
            
                id_блюда    int primary key references блюда,
                id_акции    int references акции_на_блюда            
                
            );
        
        ---------------------------------------------------------------------
            
            create table статусы_ключ_карт(    
                id_статуса  int     primary key,
                статус      varchar 
            );
            
            create table ключ_карты_скуд(
                
                номер_карты serial  primary key,
                статус      int     references  статусы_ключ_карт 
            
            );
            
            -- Привязанные ключ-карты
            create table ключ_карты_сотрудников(
                
                номер_карты     int primary key references ключ_карты_скуд,
                id_сотрудника   int references сотрудники 
            
            );
            
            create table считыватели(
                id_считывателя  int     primary key,
                имя             varchar
            );
            
            --truncate table табель_учёта_рв;
            create table табель_учёта_рв(
            
                id_записи       serial  primary key,
                
                id_сотрудника   int     references сотрудники,
                
                год             varchar,
                месяц           varchar,
                
                "1"             int,
                "2"             int,
                "3"             int,
                "4"             int,
                "5"             int,
                "6"             int,
                "7"             int,
                "8"             int,
                "9"             int,
                "10"            int,
                "11"            int,
                "12"            int,
                "13"            int,
                "14"            int,
                "15"            int,
                "16"            int,
                "17"            int,
                "18"            int,
                "19"            int,
                "20"            int,
                "21"            int,
                "22"            int,
                "23"            int,
                "24"            int,
                "25"            int,
                "26"            int,
                "27"            int,
                "28"            int,
                "29"            int,
                "30"            int,
                "31"            int
            
            );
            
            create table виды_нарушений(
                id          int     primary key,
                название    varchar
            );
        
            create table нарушения(
                id_нарушения    int     primary key,
                нарушение       varchar,
                вид_нарушения   int     references виды_нарушений
            );
        
            create table журнал_нарушений(
                id_записи           serial      primary key,
                время_записи        timestamp   default     current_timestamp,
                id_нарушителя       int         references  сотрудники,
                описание_нарушения  int         references  нарушения
            );
            
            create table действия_скуд(
                id              int         primary key,
                действие_скуд   varchar
            );
        
            create table записи_скуд(
                id_записи       serial      primary key,
                ts              timestamp   default     current_timestamp,
                id_считывателя  int         references  считыватели,
                id_ключ_карты   int         references  ключ_карты_скуд,
                действие        int         references  действия_скуд
            );

                    
            create table команды_сигналов(
                id_команды  int     primary key,
                команда     varchar
            );
            
            create table сигналы_таймера(
                id_сигнала      serial      primary key,
                время_сигнала   timestamp,
                команда_сигнала  int         references команды_сигналов
            );      
        
        
                
        end Блок_создания_таблиц;
    
    
    
    
                              -- [ ПРЕДСТАВЛЕНИЯ ] --
    
    
        <<Блок_создания_представлений>>
        begin
       
            --Представление для показа всех блюд каждого меню            
            create or replace view меню
            as
            (   --explain analyse      
                select 
                    concat(м.id_меню, '. ', м.название_меню)        as "Меню",
                    concat(р.id_раздела, '. ', р.название_раздела)  as "Раздел",
                    б.id_блюда                                      as "ID блюда",
                    б.название_блюда                                as "Название Блюда",
                    б.количество                                    as "Количество",
                    б.цена                                          as "Цена"
                    
                from варианты_меню as м 
                    inner join разделы_меню as р    on  м.id_меню = р.id_меню
                    inner join раздел_блюдо as рб   on  (рб.id_меню = р.id_меню and рб.id_раздела = р.id_раздела)
                    inner join блюда        as б    on  б.id_блюда = рб.id_блюда
                    
                order by м.id_меню, р.id_раздела, б.название_блюда              
            );
        
        --select * from меню;
        
        
            -- Представление для показа выручки нарастающим итогом за текущий день
        create or replace view выручка_за_сегодня
        as
        (   --explain analyse
            select
                закрытые_заказы_сегодня.время_заказа::time       as "время заказа",
                закрытые_заказы_сегодня.id_заказа                as "номер заказа",
                закрытые_заказы_сегодня.сумма_заказа             as "сумма заказа",
                закрытые_заказы_сегодня.скидка                   as "скидка",
                п.сумма_платежей_по_счёту                        as "сумма платежей по счёту",
                sum(закрытые_заказы_сегодня.сумма_заказа) over w as "сумма по всем заказам",
                sum(закрытые_заказы_сегодня.скидка)       over w as "сумма скидок по всем заказам",
                sum(п.сумма_платежей_по_счёту)            over w as "сумма платежей по всем заказам"       
            from (
                    select * 
                    from заказы
                    where время_заказа::date = current_date and 
                                      статус = 'закрыт'
                ) as закрытые_заказы_сегодня
                    join счета  as с on с.id_заказа = закрытые_заказы_сегодня.id_заказа
                    join (
                            select 
                                p.id_счёта           as номер_счёта, 
                                sum(p.сумма_платежа) as сумма_платежей_по_счёту
                            from платежи p
                            group by p.id_счёта
                         )      as п on  п.номер_счёта = с.id_счёта   
            window w as (order by закрытые_заказы_сегодня.время_заказа 
                                rows between unbounded preceding and current row)        
        );
        
        
        
        
        
        --select * from выручка_за_сегодня;
        
        
        
        
        -------------------------------------
        
        -- Представление для показа рейтинга сотрудников по выручке
        create or replace view рейтинг_сотрудников_по_выручке
        as
        (   --explain analyse
            select 
                dense_rank() over (order by "Выручка сотрудника" desc)  as "Рейтинг",
                concat(сотр.фамилия, ' ', сотр.имя, ' ', сотр.отчество) as "ФИО",
                "Выручка сотрудника"
            from
                (
                    select 
                        id_сотрудника           as "ID сотрудника",                
                        sum(п.выручка_по_счёту) as "Выручка сотрудника"       
                    from (
                            select * 
                            from заказы
                            where статус = 'закрыт'
                        ) as закрытые_заказы
                            join счета  as с on с.id_заказа = закрытые_заказы.id_заказа
                            join (
                                    select 
                                        p.id_счёта           as номер_счёта, 
                                        sum(p.сумма_платежа) as выручка_по_счёту
                                    from платежи p
                                    group by p.id_счёта
                                 )      as п on  п.номер_счёта = с.id_счёта                    
                    group by "ID сотрудника"
                ) as выручка_сотрудников 
                        join сотрудники as сотр on сотр.таб_номер = выручка_сотрудников."ID сотрудника"            
        );
        
        --select * from рейтинг_сотрудников_по_выручке;
        
        
        
        -------------------------------------
        
        -- Представление для показа открытых заказов
        create or replace view список_открытых_заказов
        as
        (   --explain analyse
            select 
                з.время_заказа::time                                    as "Время заказа",
                з.id_сотрудника                                         as "ID сотрудника",
                concat(сотр.фамилия, ' ', сотр.имя, ' ', сотр.отчество) as "ФИО",
                з.номер_столика                                         as "Столик",
                з.сумма_заказа                                          as "Сумма заказа",
                з.скидка                                                as "Скидка",
                з.статус                                                as "Статус"
            from заказы as з
                join счета  as с on с.id_заказа = з.id_заказа
                join сотрудники as сотр on сотр.таб_номер = з.id_сотрудника  
            where з.статус <> 'закрыт'
        );
        
        --select * from список_открытых_заказов;
        
       ------------------------------------------------------------------- 
        


        create or replace view записи_скуд_с_параметрами
        as
        (   --explain analyse
            select
                зс.*,
                
                зс.ts::date                 as дата,
                зс.ts::time                 as время,
                extract(DOW from зс.ts)     as "день недели", 
                        
                сч.имя                      as "имя считывателя",
                
                кс.id_сотрудника            as "ID сотрудника",
                
                гр.начало_рабочего_времени  as "начало рабочего времени",
                гр.конец_рабочего_времени   as "конец рабочего времени",
                
                (select min(зс_внутр.ts)::time
                 from записи_скуд зс_внутр
                 where  зс_внутр.ts::date = зс.ts::date and
                        зс_внутр.id_ключ_карты = зс.id_ключ_карты and 
                        зс_внутр.id_считывателя = 1) as "Время первого входа",
                        
                (select max(зс_внутр.ts)::time
                 from записи_скуд зс_внутр
                 where  зс_внутр.ts::date = зс.ts::date and
                        зс_внутр.id_ключ_карты = зс.id_ключ_карты and 
                        зс_внутр.id_считывателя = 1) as "Время последнего входа",
                        
                (select min(зс_внутр.ts)::time
                 from записи_скуд зс_внутр
                 where  зс_внутр.ts::date = зс.ts::date and
                        зс_внутр.id_ключ_карты = зс.id_ключ_карты and 
                        зс_внутр.id_считывателя = 2) as "Время первого выхода",
                        
                (select max(зс_внутр.ts)::time
                 from записи_скуд зс_внутр
                 where  зс_внутр.ts::date = зс.ts::date and
                        зс_внутр.id_ключ_карты = зс.id_ключ_карты and 
                        зс_внутр.id_считывателя = 2) as "Время последнего выхода"
                
                from записи_скуд                as зс
                join считыватели                as сч   on сч.id_считывателя = зс.id_считывателя
                join ключ_карты_сотрудников     as кс   on кс.номер_карты  = зс.id_ключ_карты  
                join сотрудники                 as с    on с.таб_номер = кс.id_сотрудника
                join графики_рабочего_времени   as гр   on гр.id_графика = с.график_рабочего_времени 
                
        );
        
            
        end Блок_создания_представлений;
    
    
    
    
                               -- [ ИНДЕКСЫ ] --
    
    
        <<Блок_создания_индексов>>
        begin
                        
--            create index if not exists index_on_ts
--                on записи_скуд(ts);
            
        end Блок_создания_индексов;
    
    
    
    end DDL_блок_создания_объектов_БД;




                       -- [ НАПОЛНЕНИЕ ТАБЛИЦ ДАННЫМИ ] --


    <<DML_блок_инициализации>>
    begin
        
        raise notice ' ';
        raise notice '- Добавление вариантов меню...';
    
        -- Добавление вариантов меню
        insert into варианты_меню (id_меню, название_меню)
        values
            (1, 'Основное меню'),
            (2, 'Бизнес-ланч'),
            (3, 'Кофейная карта');
        
        
        raise notice '- Добавление разделов для каждого меню...';
    
        -- Добавление разделов меню (создание связанных пар меню-раздел)    
        insert into разделы_меню (id_меню, id_раздела, название_раздела)
        values
        
            -- +3 раздела в Основное меню:
        
            (1, 1, 'Супы'),
            (1, 2, 'Горячие блюда'),
            (1, 3, 'Напитки'),
             
                         
            -- +3 раздела в меню Бизнес-ланч:
             
            (2, 1, 'Салаты'),
            (2, 2, 'Супы'),
            (2, 3, 'Горячие блюда'),

             -- +3 раздела в меню Кофейная карта:
             
            (3, 1, 'Классический кофе'),
            (3, 2, 'Холодный Кофе'),
            (3, 3, 'Авторские напитки');

    
            raise notice '- Добавление списка блюд...';
    
        -- Добавление блюд
        insert into блюда (название_блюда, количество, цена)
        values
                      
            -- Салаты
            ('Салат Греческий', '200гр', 270),
            ('Салат Цезарь', '220гр', 450),
            ('Салат Овощной', '280гр', 290),
            ('Салат с крабовыми палочками', '150гр', 140),
            ('Салат Оливье', '130гр', 140),
            
            -- Супы
            ('Суп с куриными фрикадельками', '300гр', 150),
            ('Борщ', '300гр', 150),
            ('Венгерский суп гуляш', '400гр', 240),
            ('Окрошка с телятиной', '350гр', 220),
            ('Уха Царская', '300гр', 450),
        
            -- Горячие блюда
            ('Жаркое со свининой в горшочке', '350гр', 360),
            ('Стейк из сёмги', '150гр', 850),
            ('Перепела на углях', '2шт', 680),
            ('Шашлык из баранины', '100гр', 200),
            ('Шашлык из свинины', '100гр', 200),
        
            
            -- Напитки
            
            -- Чай/сок/лимонад
            ('Сок в ассортименте', '200мл', 160),
            ('Морс ягодный', '200мл', 60),
            ('Лимонад в ассортименте', '500мл', 130),
            ('Чай ПуЭр', '400мл', 150),
            
            -- Кофе классический
            ('Кофе Эспрессо', '30мл', 50),
            ('Американо', '250мл', 100),
            ('Капучино', '200мл', 160),
            ('Латте', '350мл', 180),
            ('Какао', '200мл', 160),
            
            -- Холодный кофе
            ('Кофе Айс', '350мл', 180),
            ('Молоко с кофейным льдом', '350мл', 200),
            ('Кофе Фраппе', '350мл', 180),
            ('Бамбл-кофе', '150мл', 200),
            ('Кофейный смузи', '500мл', 300),
            
            -- Кофе авторской работы
            ('Тыквенный Латте', '200мл', 350),
            ('Раф домашняя роза', '200мл', 350),
            ('Кофейный глинтвейн', '200мл', 400),
            ('Флэт Уайт', '200мл', 350),
            ('Чиз Латте', '200мл', 350);
        
            
        raise notice '- Добавление блюд в разделы меню...';
    
        -- Добавление блюд в разделы меню (создание связанных пар раздел-блюдо)
        insert into раздел_блюдо
            (
                id_меню,
                id_раздела,                 
                id_блюда
            )
        values
        
            -- Наполнение Основного меню
        
            -- +5 супов в раздел Супы Основного меню:        
        
            (   
                1, -- Основное меню
                1, -- Раздел Супы
             
                -- Определение id добавляемого блюда по его названию
                (select id_блюда
                 from блюда
                 where название_блюда = 'Суп с куриными фрикадельками')
            ),
        
            (   
                1, -- Основное меню
                1, -- Раздел Супы
             
                -- Определение id добавляемого блюда по его названию
                (select id_блюда
                 from блюда
                 where название_блюда = 'Борщ')
            ),
            
            (   
                1, -- Основное меню
                1, -- Раздел Супы
             
                -- Определение id добавляемого блюда по его названию
                (select id_блюда
                 from блюда
                 where название_блюда = 'Венгерский суп гуляш')
            ),
        
            (   
                1, -- Основное меню
                1, -- Раздел Супы
             
                -- Определение id добавляемого блюда по его названию
                (select id_блюда
                 from блюда
                 where название_блюда = 'Окрошка с телятиной')
            ),
        
            (   
                1, -- Основное меню
                1, -- Раздел Супы
             
                -- Определение id добавляемого блюда по его названию
                (select id_блюда
                 from блюда
                 where название_блюда = 'Уха Царская')
            ),
        
            
            -- +5 горячих блюд в раздел Горячие блюда Основного меню:        
        
            (   
                1, -- Основное меню
                2, -- Раздел Горячие блюда
             
                -- Определение id добавляемого блюда по его названию
                (select id_блюда
                 from блюда
                 where название_блюда = 'Жаркое со свининой в горшочке')
            ),
        
            (   
                1, -- Основное меню
                2, -- Раздел Горячие блюда
             
                -- Определение id добавляемого блюда по его названию
                (select id_блюда
                 from блюда
                 where название_блюда = 'Стейк из сёмги')
            ),
            
            (   
                1, -- Основное меню
                2, -- Раздел Горячие блюда
             
                -- Определение id добавляемого блюда по его названию
                (select id_блюда
                 from блюда
                 where название_блюда = 'Перепела на углях')
            ),
        
            (   
                1, -- Основное меню
                2, -- Раздел Горячие блюда
             
                -- Определение id добавляемого блюда по его названию
                (select id_блюда
                 from блюда
                 where название_блюда = 'Шашлык из баранины')
            ),
        
            (   
                1, -- Основное меню
                2, -- Раздел Горячие блюда
             
                -- Определение id добавляемого блюда по его названию
                (select id_блюда
                 from блюда
                 where название_блюда = 'Шашлык из свинины')
            ),
        
            
            -- +5 напитков в раздел Напитки Основного меню:        
        
            (   
                1, -- Основное меню
                3, -- Раздел Напитки
             
                -- Определение id добавляемого блюда по его названию
                (select id_блюда
                 from блюда
                 where название_блюда = 'Сок в ассортименте')
            ),
        
            (   
                1, -- Основное меню
                3, -- Раздел Напитки
             
                -- Определение id добавляемого блюда по его названию
                (select id_блюда
                 from блюда
                 where название_блюда = 'Морс ягодный')
            ),
            
            (   
                1, -- Основное меню
                3, -- Раздел Напитки
             
                -- Определение id добавляемого блюда по его названию
                (select id_блюда
                 from блюда
                 where название_блюда = 'Лимонад в ассортименте')
            ),
        
            (   
                1, -- Основное меню
                3, -- Раздел Напитки
             
                -- Определение id добавляемого блюда по его названию
                (select id_блюда
                 from блюда
                 where название_блюда = 'Чай ПуЭр')
            ),
        
            (   
                1, -- Основное меню
                3, -- Раздел Напитки
             
                -- Определение id добавляемого блюда по его названию
                (select id_блюда
                 from блюда
                 where название_блюда = 'Кофе Эспрессо')
            ),
        
            
            -- Наполнение меню Бизнес-ланч
            
            -- +5 салатов в раздел Салаты меню Бизнес-ланч:        
        
            (   
                2, -- Меню Бизнес-ланч
                1, -- Раздел Салаты
             
                -- Определение id добавляемого блюда по его названию
                (select id_блюда
                 from блюда
                 where название_блюда = 'Салат Греческий')
            ),
        
            (   
                2, -- Меню Бизнес-ланч
                1, -- Раздел Салаты
             
                -- Определение id добавляемого блюда по его названию
                (select id_блюда
                 from блюда
                 where название_блюда = 'Салат Цезарь')
            ),
            
            (   
                2, -- Меню Бизнес-ланч
                1, -- Раздел Салаты
             
                -- Определение id добавляемого блюда по его названию
                (select id_блюда
                 from блюда
                 where название_блюда = 'Салат Овощной')
            ),
        
            (   
                2, -- Меню Бизнес-ланч
                1, -- Раздел Салаты
             
                -- Определение id добавляемого блюда по его названию
                (select id_блюда
                 from блюда
                 where название_блюда = 'Салат с крабовыми палочками')
            ),
        
            (   
                2, -- Меню Бизнес-ланч
                1, -- Раздел Салаты
             
                -- Определение id добавляемого блюда по его названию
                (select id_блюда
                 from блюда
                 where название_блюда = 'Салат Оливье')
            ),
        
            
            -- +5 супов в раздел Супы меню Бизнес-ланч:        
        
            (   
                2, -- Меню Бизнес-ланч
                2, -- Раздел Супы
             
                -- Определение id добавляемого блюда по его названию
                (select id_блюда
                 from блюда
                 where название_блюда = 'Суп с куриными фрикадельками')
            ),
        
            (   
                2, -- Меню Бизнес-ланч
                2, -- Раздел Супы
             
                -- Определение id добавляемого блюда по его названию
                (select id_блюда
                 from блюда
                 where название_блюда = 'Борщ')
            ),
            
            (   
                2, -- Меню Бизнес-ланч
                2, -- Раздел Супы
             
                -- Определение id добавляемого блюда по его названию
                (select id_блюда
                 from блюда
                 where название_блюда = 'Венгерский суп гуляш')
            ),
        
            (   
                2, -- Меню Бизнес-ланч
                2, -- Раздел Супы
             
                -- Определение id добавляемого блюда по его названию
                (select id_блюда
                 from блюда
                 where название_блюда = 'Окрошка с телятиной')
            ),
        
            (   
                2, -- Меню Бизнес-ланч
                2, -- Раздел Супы
             
                -- Определение id добавляемого блюда по его названию
                (select id_блюда
                 from блюда
                 where название_блюда = 'Уха Царская')
            ),
        
            
            -- +5 горячих блюд в раздел Горячие блюда меню Бизнес-ланч:        
        
            (   
                2, -- Меню Бизнес-ланч
                3, -- Раздел Горячие блюда
             
                -- Определение id добавляемого блюда по его названию
                (select id_блюда
                 from блюда
                 where название_блюда = 'Жаркое со свининой в горшочке')
            ),
        
            (   
                2, -- Меню Бизнес-ланч
                3, -- Раздел Горячие блюда
             
                -- Определение id добавляемого блюда по его названию
                (select id_блюда
                 from блюда
                 where название_блюда = 'Стейк из сёмги')
            ),
            
            (   
                2, -- Меню Бизнес-ланч
                3, -- Раздел Горячие блюда
             
                -- Определение id добавляемого блюда по его названию
                (select id_блюда
                 from блюда
                 where название_блюда = 'Перепела на углях')
            ),
        
            (   
                2, -- Меню Бизнес-ланч
                3, -- Раздел Горячие блюда
             
                -- Определение id добавляемого блюда по его названию
                (select id_блюда
                 from блюда
                 where название_блюда = 'Шашлык из баранины')
            ),
        
            (   
                2, -- Меню Бизнес-ланч
                3, -- Раздел Горячие блюда
             
                -- Определение id добавляемого блюда по его названию
                (select id_блюда
                 from блюда
                 where название_блюда = 'Шашлык из свинины')
            ),
        
            
            
            -- Наполнение меню Кофейная карта
            
            -- +5 напистков в раздел Классический кофе меню Кофейная карта:        
        
            (   
                3, -- Меню Кофейная карта
                1, -- Раздел Классический кофе
             
                -- Определение id добавляемого блюда по его названию
                (select id_блюда
                 from блюда
                 where название_блюда = 'Кофе Эспрессо')
            ),
        
            (   
                3, -- Меню Кофейная карта
                1, -- Раздел Классический кофе
             
                -- Определение id добавляемого блюда по его названию
                (select id_блюда
                 from блюда
                 where название_блюда = 'Американо')
            ),
            
            (   
                3, -- Меню Кофейная карта
                1, -- Раздел Классический кофе
             
                -- Определение id добавляемого блюда по его названию
                (select id_блюда
                 from блюда
                 where название_блюда = 'Капучино')
            ),
        
            (   
                3, -- Меню Кофейная карта
                1, -- Раздел Классический кофе
             
                -- Определение id добавляемого блюда по его названию
                (select id_блюда
                 from блюда
                 where название_блюда = 'Латте')
            ),
        
            (   
                3, -- Меню Кофейная карта
                1, -- Раздел Классический кофе
             
                -- Определение id добавляемого блюда по его названию
                (select id_блюда
                 from блюда
                 where название_блюда = 'Какао')
            ),
        
            
            -- +5 напиттков в раздел Холодный Кофе меню Кофейная карта:        
        
            (   
                3, -- Меню Кофейная карта
                2, -- Раздел Холодный Кофе
             
                -- Определение id добавляемого блюда по его названию
                (select id_блюда
                 from блюда
                 where название_блюда = 'Кофе Айс')
            ),
        
            (   
                3, -- Меню Кофейная карта
                2, -- Раздел Холодный Кофе
             
                -- Определение id добавляемого блюда по его названию
                (select id_блюда
                 from блюда
                 where название_блюда = 'Молоко с кофейным льдом')
            ),
            
            (   
                3, -- Меню Кофейная карта
                2, -- Раздел Холодный Кофе
             
                -- Определение id добавляемого блюда по его названию
                (select id_блюда
                 from блюда
                 where название_блюда = 'Кофе Фраппе')
            ),
        
            (   
                3, -- Меню Кофейная карта
                2, -- Раздел Холодный Кофе
             
                -- Определение id добавляемого блюда по его названию
                (select id_блюда
                 from блюда
                 where название_блюда = 'Бамбл-кофе')
            ),
        
            (   
                3, -- Меню Кофейная карта
                2, -- Раздел Холодный Кофе
             
                -- Определение id добавляемого блюда по его названию
                (select id_блюда
                 from блюда
                 where название_блюда = 'Кофейный смузи')
            ),
        
            
            -- +5 напитков в раздел Авторские напитки меню Кофейная карта:        
        
            (   
                3, -- Меню Кофейная карта
                3, -- Раздел Авторские напитки
             
                -- Определение id добавляемого блюда по его названию
                (select id_блюда
                 from блюда
                 where название_блюда = 'Тыквенный Латте')
            ),
        
            (   
                3, -- Меню Кофейная карта
                3, -- Раздел Авторские напитки
             
                -- Определение id добавляемого блюда по его названию
                (select id_блюда
                 from блюда
                 where название_блюда = 'Раф домашняя роза')
            ),
            
            (   
                3, -- Меню Кофейная карта
                3, -- Раздел Авторские напитки
             
                -- Определение id добавляемого блюда по его названию
                (select id_блюда
                 from блюда
                 where название_блюда = 'Кофейный глинтвейн')
            ),
        
            (   
                3, -- Меню Кофейная карта
                3, -- Раздел Авторские напитки
             
                -- Определение id добавляемого блюда по его названию
                (select id_блюда
                 from блюда
                 where название_блюда = 'Флэт Уайт')
            ),
        
            (   
                3, -- Меню Кофейная карта
                3, -- Раздел Авторские напитки
             
                -- Определение id добавляемого блюда по его названию
                (select id_блюда
                 from блюда
                 where название_блюда = 'Чиз Латте')
            );
        
      
        
        
        -----------------------------------------------
                  
                        
            insert into графики_рабочего_времени (id_графика, имя_графика, начало_рабочего_времени, конец_рабочего_времени)
            values 
                (1, 'Администратор', '9:30', '15:30'),
                (2, 'Основной', '8:00', '15:00'),
                (3, 'Технический персонал', '10:00', '18:00');
            
            --------------------------------------
                        
            insert into должности (id_должности, название_должности)
            values
                (1, 'Управляющий'),
                (2, 'Сотрудник службы безопасности'),
                (3, 'Кассир'),
                (4, 'Официант'),
                (5, 'Повар'),
                (6, 'Технический специалист'),
                (7, 'Сотрудник службы уборки помещений');
            
            
                        
            insert into сотрудники
                (    
                    таб_номер,
                    фамилия,
                    имя,
                    отчество,
                    должность,
                    график_рабочего_времени
                )
            values
                (1,'Шатохин', 'Олег', 'Николаевич', 1, 1),
                (2,'Марченко', 'Александр', '', 2, 2),
                (3,'Кодд', 'Эдгар', '', 3, 2),
                (4,'Торвальдс', 'Линус', '', 5, 2),
                (5,'Бэкус', 'Джон', '', 4, 2),
                (6,'Наур', 'Петер', '', 4, 2),
                (7,'Козлов', 'Ярослав', '', 6, 3);
            
                    
            
            ----------------------------------------------
            
                
            insert into заказы 
                (
                    id_сотрудника,
                    номер_столика,
                    сумма_заказа,
                    скидка
                )
            values
                (
                    15,
                    1,
                    1500,
                    150
                );
            
            
            
            insert into счета 
                (
                    время_счёта,
                    id_заказа,
                    сумма_счёта
                )
            values
                (
                    '2022-01-01 15:00',
                    (select id_заказа
                    from заказы
                    limit 1), 
                    1300
                );
            
            
            insert into виды_платежей (id, название_вида_платежа)
            values
                (1, 'карта'),
                (2, 'наличные');
            
                        
            insert into платежи 
                (
                    id_счёта,
                    вид_платежа,
                    сумма_платежа
                )
            values
                (
                    (select id_счёта
                    from счета
                    limit 1), 
                    1,
                    300
                );
            
            ----------------------------------------
                    
            
            
            insert into табель_учёта_рв 
                (id_сотрудника,     год,    месяц,  "1",    "2",    "3",    "4",    "5",    "6",    "7")
            values
                (      1,          2022,      8,     8,      8,      8,      8,      8,      8,      8),
                (      2,          2022,      8,     8,      8,      8,      8,      8,      8,      8),
                (      3,          2022,      8,     8,      8,      8,      8,      8,      8,      8),
                (      4,          2022,      8,     8,      8,      8,      8,      8,      8,      8),
                (      5,          2022,      8,     8,      8,      8,      8,      8,      8,      8),
                (      6,          2022,      8,     8,      8,      8,      8,      8,      8,      8),
                (      7,          2022,      8,     8,      8,      8,      8,      8,      8,      8);
            

            
            ------------------------------------
        
        
            insert into статусы_ключ_карт (id_статуса, статус)
            values
                (1, 'Активирована'),
                (2, 'Деактивирована');
                
            
                        
            -- Создать 10 ключ-карт
            insert into ключ_карты_скуд (статус)
            values
                (1), (1), (1), (1), (1),
                (2), (2), (2), (2), (2);
            
            
            
            -- Привязать ключ-карты к сотрудникам
            insert into ключ_карты_сотрудников (номер_карты, id_сотрудника)
            values
                (1, 1),
                (2, 2),
                (3, 3),
                (4, 4),
                (5, 5),
                (6, 6),
                (7, 7);
            
            
            
            insert into считыватели (id_считывателя, имя)
            values 
                (1, 'Вход'),
                (2, 'Выход');
            
            -----------------------------------------------
            
            
            insert into виды_нарушений (id, название)
            values
                (1, 'Нарушение графика рабочего времени'),
                (2, 'Нарушение требований СКУД'),
                (3, 'Нарушение порядка оформления заказов');
            
            
            insert into нарушения (id_нарушения, нарушение, вид_нарушения)
            values
                (1, 'Вход после начала рабочего времени!', 1),
                (2, 'Выход в рабочее время!', 1),
                (3, 'Не отмечены вход-выход!', 2),
                (4, 'Не отмечен вход!', 2),
                (5, 'Не отмечен выход!', 2),
                (6, 'Попытка несанкционированного прохода!', 2),
                (7, 'Попытка добавить скидку к заказу после выдачи счёта!', 3);
            
            
            
            
            insert into журнал_нарушений (id_нарушителя, описание_нарушения)
            values
                (5, 3);

        ---------------------------------------------------
        
            
            
                        
            
            
            insert into действия_скуд (id, действие_скуд)
            values
                (1, 'Открытие-закрытие'),
                (2, 'Отказ в доступе!');
            
            --drop table записи_скуд cascade;
            
            
        
        
            insert into команды_сигналов (id_команды, команда)
            values
                (1, 'Заполнить табель за сегодня'),
                (2, 'Заполнить табель за всё время'),
                (3, 'Удалить все записи табеля'),
                (4, 'Деактивировать ключ-карты сотрудников'),
                (5, 'Активировать ключ-карты сотрудников');
                
                
            
             
        
        --||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||--
        --||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||--
            
            
        
    end DML_блок_инициализации;




                       -- [ РАСПРЕДЕЛЕНИЕ ПРАВ ДОСТУПА ] --


    <<DCL_блок_ролей>>
    begin
    
        --drop role if exists администратор;
        --drop role if exists управляющий;
        --drop role if exists официант;
        --drop role if exists служба_безопасности;
    
        -- Создание новых ролей
        --create role администратор with password '0';
        --create role управляющий with password '1';
        --create role официант with password '2';
        --create role служба_безопасности with password '3';
            

        <<блок_удаления_старых_ролей>>
        declare 
            existance bool;
            роль record;
        begin
    
            existance = exists(select from pg_roles where rolname = 'администратор');
        
            -- Удаление старых ролей, если существуют
            if existance then 
                
                revoke all privileges on all tables in schema ярослав_козлов_ресторан 
                                                    from администратор;
                revoke all privileges on all sequences in schema ярослав_козлов_ресторан 
                                                    from администратор;
                revoke all privileges on all functions in schema ярослав_козлов_ресторан 
                                                    from администратор;
                revoke usage on schema ярослав_козлов_ресторан from администратор;
                    
                drop role администратор;
            
            end if;
                
        end блок_удаления_старых_ролей;
    
        

        <<блок_создания_новых_ролей>>
        declare 
            роль record;
        begin   
                
            -- Создание новой роли администратор
            raise notice '';
            raise notice 'Создание роли администратор...';
            create role администратор with login password '0';
                        
            --grant all on all tables in schema ярослав_козлов_ресторан to администратор;
            grant all on варианты_меню to администратор;
            grant select on блюда to администратор;
            grant all on all sequences in schema ярослав_козлов_ресторан to администратор;
            grant all on all functions in schema ярослав_козлов_ресторан to администратор;
            grant usage on schema ярослав_козлов_ресторан to администратор;
    
                    
            -- Показать роли
            raise notice '';
            raise notice 'Роли:';
            raise notice '';
        
            for роль in (select rolname 
                         from pg_roles 
                         where rolname not like 'pg_%' 
                         order by rolname)
            loop
                raise notice '-%', роль.rolname;
            end loop;
    
        end блок_создания_новых_ролей;  
    
    end DCL_блок_ролей;
end Основной_блок_установки_БД;
$final_task$;

\echo
\l
\echo
\dn
\echo
\du
\echo
\dt
\echo
\dv
\echo
\echo 'Таблица "варианты_меню":'
select * 
from варианты_меню
order by id_меню;
\echo
\echo 'Таблица "разделы_меню":'
select * 
from разделы_меню
order by id_раздела, id_меню;
\echo
\echo 'Таблица "блюда":'
select * 
from блюда
order by id_блюда;
\echo


\echo '- Создание хранимых процедур...'
\echo



                    -- [ ПРОЦЕДУРЫ / ФУНКЦИИ / ТРИГГЕРЫ ] --


-- Процедура создания нового блюда
create or replace procedure создать_блюдо(
          
          название varchar,
        количество varchar,
              цена int
    )
as
$$
begin   
    
    insert into блюда (название_блюда, количество, цена)
    values
        (название, количество, цена);
                
end
$$ language plpgsql;

--call создать_блюдо('dish', 'a lot of', 1000);


-- Процедура удаления блюда
create or replace procedure удалить_блюдо(id int) 
as
$$
begin   
    
    delete from блюда
    where id_блюда = id;
                
end
$$ language plpgsql;

--call удалить_блюдо(35);


-- Процедура добавления блюда в раздел
create or replace procedure добавить_блюдо_в_раздел(
        id_меню_в_которое_добавить int,
        id_раздела_в_который_добавить int,
        id_блюда_которое_добавить int)
as
$$
begin   
    
    insert into раздел_блюдо (id_меню, id_раздела, id_блюда)
    values
        (
            id_меню_в_которое_добавить,
            id_раздела_в_который_добавить,
            id_блюда_которое_добавить
        );
        
end
$$ language plpgsql;


-- Процедура удаления блюда из раздела
create or replace procedure удалить_блюдо_из_раздела(

        id_меню_из_которого_удалить int,
        id_раздела_из_которого_удалить int,
        id_блюда_которое_удалить int
        
    )
as
$$
begin   
    
    delete from раздел_блюдо
    where
        id_меню = id_меню_из_которого_удалить and
        id_раздела = id_раздела_из_которого_удалить and 
        id_блюда = id_блюда_которое_удалить;
            
end
$$ language plpgsql;

--call удалить_блюдо_из_раздела(1, 1, 6);

--call добавить_блюдо_в_раздел(1, 1, 20);

--select * from меню;



-----------------------------------------------------------------


--insert into сигналы_таймера(время_сигнала, команда_сигнала) values('2022-08-17 13:20', 1);
--truncate table табель_учёта_рв;
--
--call приложить_ключ_карту(2, 3, '2022-08-17 12:00');
--call приложить_ключ_карту(1, 7);



-- ВЫПОЛНЕНИЕ ЗАДАЧ ПО СИГНАЛАМ ТАЙМЕРА
create or replace function trf_выполнить_задачу()
returns trigger
as 
$$
declare 
    r record;
    query varchar;
    имя_поля_табеля_число varchar;
    время_работы int = 111;
begin
    
    raise notice 'В таблицу сигналы_таймера вставлена запись new = %', new;



                -- [ АНАЛИЗ СИГНАЛА ТАЙМЕРА И ИСПОЛНЕНИЕ СООТВЕТСТВУЮЩЕЙ ЗАДАЧИ ] -- 

    
    if new.команда_сигнала = 1 then -- Если в сигнале команда "Составить табель за сегодня"...
    
    
                    -- [ ОТБОР ЗАПИСЕЙ СКУД ДЛЯ РАБОТЫ В ПЕРЕМЕННУЮ r ] -- 
            
        for r in    (   -- Выбираем информацию о проходах из СКУД...
                        select * 
                        from записи_скуд_с_параметрами
                        where   дата = current_date and -- Оставляем только за текущий день
                                ("день недели" > 0 and "день недели" < 6) and -- Оставляем только рабочие дни
                                действие = 1 -- Оставляем только проходы (отказ в доступе исключаем)
                    )
        loop
            
            
                             -- [ РАСЧЁТ РАБОЧЕГО ВРЕМЕНИ ] -- 
            
            
            
            
                        -- [ ПРОВЕРКА ПОСЛЕДОВАТЕЛЬНОСТИ ВХОД-ВЫХОД ] --
            
            
            
            
            
            
                          -- [ ДОБАВЛЕНИЕ РАБОЧЕГО ВРЕМЕНИ В ТАБЕЛЬ ] -- 
            
            
            -- Определяем имя поля табеля для числа из даты текущей строки r...
            имя_поля_табеля_число = extract(day from r.ts);
                                
            if exists(   -- Проверяем наличие записи в табеле... 
                            select * 
                            from табель_учёта_рв  
                            where   id_сотрудника = r."ID сотрудника" and -- для сотрудника из текущей строки r
                                    год = extract(year from r.ts)::text and -- года из текущей строки r
                                    месяц = extract(month from r.ts)::text -- и месяца из текущей строки r
                        ) then -- Если запись в табеле уже есть...
                
                                
                -- Составляем скрипт для обновления имеющейся записи...                
                query = concat('update табель_учёта_рв set "', имя_поля_табеля_число, '" = ', время_работы,
                                ' where id_сотрудника = ', r."ID сотрудника");
            
                raise notice 'query: %', query;
            
                -- Выполняем скрипт...
                execute(query);
            
            else -- Если записи в табеле нет...            
            
                -- Составляем скрипт для добавления новой записи...                
                query = concat('insert into табель_учёта_рв (id_сотрудника, год, месяц, "', имя_поля_табеля_число, '")', 
                                ' values (',    r."ID сотрудника", ', ',
                                                extract(year from r.ts), ', ',
                                                extract(month from r.ts), ', ',
                                                время_работы, ')'
                              );
                          
                raise notice 'query: %', query;
            
                -- Выполняем скрипт...
                execute(query);
            
            end if;
 
                            
        end loop;      
            
    end if;

    if new.команда_сигнала = 2 then
    
        raise notice 'Command 2';

    end if;
    
        
    return new;
    
end;
$$ language plpgsql;

               


create or replace trigger tr_выполнить_задачу
after insert on сигналы_таймера
    for each row execute function trf_выполнить_задачу();




create or replace function trf_рассылка_оповещения()
returns trigger
as 
$$
declare 
    фио_нарушителя      varchar;
    тип_нарушения       varchar;
    описание  varchar;
begin
    
    фио_нарушителя = (select 
                        regexp_replace(concat(фамилия, ' ', имя, ' ', отчество),
                                       '( ){2,}',' ')
                      from сотрудники as с
                        where с.таб_номер = new.id_нарушителя);
                    
    тип_нарушения = (select название
                     from виды_нарушений as вн
                     where вн.id = (select вид_нарушения
                                    from нарушения as н
                                    where н.id_нарушения = new.описание_нарушения));
                                                     
    описание = (select нарушение
                          from нарушения as н
                          where н.id_нарушения = new.описание_нарушения);
                        
    raise notice '';    
    raise notice 'Информирование управляющего и сотрудника службы безопасности...';
    raise notice 'Отправка СМС с текстом:';
    raise notice 'Зарегистрировано нарушение!';
    raise notice 'Номер записи в журнале нарушений: %', new.id_записи;
    raise notice 'Дата и время записи: %', 
                    to_char(new.время_записи, 'DD.MM.YYYY HH24:MI:SS');    
    raise notice 'ID нарушителя: %', new.id_нарушителя;
    raise notice 'ФИО нарушителя: %', фио_нарушителя;
    raise notice 'Вид нарушения: %', тип_нарушения;
    raise notice 'Описание нарушения: %', описание;
    
    return new;
    
end;
$$ language plpgsql;

create or replace trigger tr_рассылка_оповещения
after insert on журнал_нарушений
    for each row execute function trf_рассылка_оповещения();





------------------------------------------------------------------


-- Процедура добавления/удаления имени схемы в переменной путей поиска 
create or replace procedure изменить_путь_поиска()
as
$$
declare
    текущие_пути_поиска varchar;    
    новые_пути_поиска varchar;
begin   

    -- Текущее значение переменной путей поиска
    текущие_пути_поиска = current_setting('search_path');
    
    raise notice 'search_path было: %', current_setting('search_path');

    -- Если схема "ярослав_козлов_ресторан" в переменной, то убрать
    if текущие_пути_поиска ilike '%ярослав_козлов_ресторан%' then
                
        -- Извлечение схемы "ярослав_козлов_ресторан" из переменной
        новые_пути_поиска = regexp_replace(
                                    текущие_пути_поиска,
                                    '([\s]*ярослав_козлов_ресторан[\s]*,+[\s]*)|
                                    (,[\s]*ярослав_козлов_ресторан$)',
                                    '','g'); 
        
    -- Если схемы "ярослав_козлов_ресторан" нет в переменной - добавить
    else

        -- Добавление схемы "ярослав_козлов_ресторан" в переменную
        новые_пути_поиска = 'ярослав_козлов_ресторан, ' || текущие_пути_поиска;
    
    end if;
    
    -- Установка нового (переключенного) значения в переменную путей поиска
    perform set_config('search_path', новые_пути_поиска, false);        
        
    
    raise notice 'search_path стало: %', current_setting('search_path');
        
end
$$ language plpgsql;


--------------------------------------------------



create or replace function trf_проверить_карту()
returns trigger 
as 
$$
begin 
    
    if  (select статус 
         from ключ_карты_скуд
         where номер_карты = new.id_ключ_карты) = 1 then 
            new.действие = 1;
    else
            new.действие = 2;
                   
            insert into журнал_нарушений (id_нарушителя, описание_нарушения)
            values
                (
                    (select кс.id_сотрудника 
                     from ключ_карты_сотрудников as кс 
                     where кс.номер_карты = new.id_ключ_карты), 
                    
                     6
                 );
        
    end if;

    return new;
    
end;
$$ language plpgsql;

create or replace trigger tr_проверка_активации
before insert on записи_скуд
    for each row execute function trf_проверить_карту();



create or replace function trf_контроль_нарушения_графика()
returns trigger 
as 
$$
declare 
    rec record;
begin 
    
    select * 
    from записи_скуд_с_параметрами as зсп 
    where зсп.id_записи = new.id_записи
        into rec;

    if rec."день недели" > 0 and rec."день недели" < 6 and new.действие = 1 then 
        
        if rec."имя считывателя" = 'Вход' and
           rec."начало рабочего времени" < rec."время" and rec."время" < rec."конец рабочего времени"
            then
                    
            insert into журнал_нарушений (id_нарушителя, описание_нарушения)
            values
                (rec."ID сотрудника", 1);
            
        end if;
    
        if rec."имя считывателя" = 'Выход' and
           rec."начало рабочего времени" < rec."время" and rec."время" < rec."конец рабочего времени"
            then
            
            insert into журнал_нарушений (id_нарушителя, описание_нарушения)
            values
                (rec."ID сотрудника", 2);
        
        end if;    
    
    end if;

    return new;
    
end;
$$ language plpgsql;



--drop function trf_контроль_нарушения_графика cascade;
--drop trigger tr_проверка_нарушения_графика on записи_скуд;

create or replace trigger tr_контроль_нарушения_графика
after insert on записи_скуд
    for each row execute function trf_контроль_нарушения_графика();

--alter table записи_скуд disable trigger tr_контроль_нарушения_графика;



create or replace procedure приложить_ключ_карту(
    считыватель         int,
    номер_карты         int,
    timest              timestamp default current_timestamp)
as
$$
begin 
    
    insert into записи_скуд (ts, id_считывателя, id_ключ_карты)
    values 
        (timest, считыватель, номер_карты);
    
end;
$$ language plpgsql;
